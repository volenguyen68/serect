{"version":3,"sources":["jave.js"],"names":["console","clear","scene","THREE","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","antialias","renderer","setClearColor","setSize","domElement","position","z","controls","TrackballControls","maxDistance","minDistance","Group","heart","sampler","OBJLoader","children","rotateX","geometry","load","obj","translate","add","Math","PI","material","scale","MeshBasicMaterial","color","group","MeshSurfaceSampler","init","originHeart","Array","from","attributes","array","positions","build","LineBasicMaterial","lines","BufferGeometry","simplex","SimplexNoise","Grass","LineSegments","pos","Vector3","sample","clone","this","one","random","two","a","noise","noise4D","x","y","multiplyScalar","beat","setLength","spikes","i","g","push","ease","render","gsap","rotation","duration","setAttribute","BufferAttribute","Float32Array","vs","length","forEach","update","v","needsUpdate","onWindowResize","aspect","updateProjectionMatrix","timeline","repeat","to"],"mappings":"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","file":"jave.min.js","sourcesContent":["console.clear();\n\nconst scene = new THREE.Scene();\nconst camera = new THREE.PerspectiveCamera(\n  75,\n  window.innerWidth / window.innerHeight,\n  0.1,\n  1000\n);\n\nconst renderer = new THREE.WebGLRenderer({\n  antialias: true\n});\nrenderer.setClearColor(0xff5555);\nrenderer.setSize(window.innerWidth, window.innerHeight);\ndocument.body.appendChild(renderer.domElement);\n\ncamera.position.z = 1;\n\nconst controls = new THREE.TrackballControls(camera, renderer.domElement);\ncontrols.noPan = true;\ncontrols.maxDistance = 3;\ncontrols.minDistance = 0.7;\n\nconst group = new THREE.Group();\nscene.add(group);\n\nlet heart = null;\nlet sampler = null;\nlet originHeart = null;\nnew THREE.OBJLoader().load('https://assets.codepen.io/127738/heart_2.obj',obj => {\n  heart = obj.children[0];\n  heart.geometry.rotateX(-Math.PI * 0.5);\n  heart.geometry.scale(0.04, 0.04, 0.04);\n  heart.geometry.translate(0, -0.4, 0);\n  group.add(heart);\n  \n  heart.material = new THREE.MeshBasicMaterial({\n    color: 0xff5555    \n  });\n  originHeart = Array.from(heart.geometry.attributes.position.array);\n  sampler = new THREE.MeshSurfaceSampler(heart).build();\n  init();\n  renderer.setAnimationLoop(render);\n});\n\nlet positions = [];\nconst geometry = new THREE.BufferGeometry();\nconst material = new THREE.LineBasicMaterial({\n  color: 0xffffff\n});\nconst lines = new THREE.LineSegments(geometry, material);\ngroup.add(lines);\n\nconst simplex = new SimplexNoise();\nconst pos = new THREE.Vector3();\nclass Grass {\n  constructor () {\n    sampler.sample(pos);\n    this.pos = pos.clone();\n    this.scale = Math.random() * 0.01 + 0.001;\n    this.one = null;\n    this.two = null;\n  }\n  update (a) {\n    const noise = simplex.noise4D(this.pos.x*1.5, this.pos.y*1.5, this.pos.z*1.5, a * 0.0005) + 1;\n    this.one = this.pos.clone().multiplyScalar(1.01 + (noise * 0.15 * beat.a));\n    this.two = this.one.clone().add(this.one.clone().setLength(this.scale));\n  }\n}\n\nlet spikes = [];\nfunction init (a) {\n  positions = [];\n  for (let i = 0; i < 20000; i++) {\n    const g = new Grass();\n    spikes.push(g);\n  }\n}\n\nconst beat = { a: 0 };\ngsap.timeline({\n  repeat: -1,\n  repeatDelay: 0.3\n}).to(beat, {\n  a: 1.2,\n  duration: 0.6,\n  ease: 'power2.in'\n}).to(beat, {\n  a: 0.0,\n  duration: 0.6,\n  ease: 'power3.out'\n});\ngsap.to(group.rotation, {\n  y: Math.PI * 2,\n  duration: 12,\n  ease: 'none',\n  repeat: -1\n});\n\nfunction render(a) {\n  positions = [];\n  spikes.forEach(g => {\n    g.update(a);\n    positions.push(g.one.x, g.one.y, g.one.z);\n    positions.push(g.two.x, g.two.y, g.two.z);\n  });\n  geometry.setAttribute('position', new THREE.BufferAttribute(new Float32Array(positions), 3));\n  \n  const vs = heart.geometry.attributes.position.array;\n  for (let i = 0; i < vs.length; i+=3) {\n    const v = new THREE.Vector3(originHeart[i], originHeart[i+1], originHeart[i+2]);\n    const noise = simplex.noise4D(originHeart[i]*1.5, originHeart[i+1]*1.5, originHeart[i+2]*1.5, a * 0.0005) + 1;\n    v.multiplyScalar(1 + (noise * 0.15 * beat.a));\n    vs[i] = v.x;\n    vs[i+1] = v.y;\n    vs[i+2] = v.z;\n  }\n  heart.geometry.attributes.position.needsUpdate = true;\n  \n  controls.update();\n  renderer.render(scene, camera);\n}\n\nwindow.addEventListener(\"resize\", onWindowResize, false);\nfunction onWindowResize() {\n  camera.aspect = window.innerWidth / window.innerHeight;\n  camera.updateProjectionMatrix();\n  renderer.setSize(window.innerWidth, window.innerHeight);\n}\n"]}